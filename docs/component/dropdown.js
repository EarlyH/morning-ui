!function(n){function e(e){for(var t,r,d=e[0],c=e[1],l=e[2],b=0,a=[];b<d.length;b++)r=d[b],i[r]&&a.push(i[r][0]),i[r]=0;for(t in c)Object.prototype.hasOwnProperty.call(c,t)&&(n[t]=c[t]);for(s&&s(e);a.length;)a.shift()();return u.push.apply(u,l||[]),o()}function o(){for(var n,e=0;e<u.length;e++){for(var o=u[e],t=!0,d=1;d<o.length;d++){var c=o[d];0!==i[c]&&(t=!1)}t&&(u.splice(e--,1),n=r(r.s=o[0]))}return n}var t={},i={21:0};var u=[];function r(e){if(t[e])return t[e].exports;var o=t[e]={i:e,l:!1,exports:{}};return n[e].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=n,r.c=t,r.d=function(n,e,o){r.o(n,e)||Object.defineProperty(n,e,{configurable:!1,enumerable:!0,get:o})},r.r=function(n){Object.defineProperty(n,"__esModule",{value:!0})},r.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return r.d(e,"a",e),e},r.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},r.p="/";var d=window.webpackJsonp=window.webpackJsonp||[],c=d.push.bind(d);d.push=e,d=d.slice();for(var l=0;l<d.length;l++)e(d[l]);var s=c;u.push([255,0]),o()}({1:function(n,e){n.exports=Vue},123:function(n,e,o){"use strict";o.d(e,"a",function(){return t}),o.d(e,"b",function(){return i});var t=function(){var n=this.$createElement,e=this._self._c||n;return e("doc-component",{attrs:{page:this.page,hasPadding:!0}},[e("script",{attrs:{type:"text/markdown"}},[this._v('\n# 下拉式按钮组 `<ui-dropdown>`\n\n<doc-component-status page="dropdown"></doc-component-status>\n\n[[[开始]]]\n\n定义下拉式按钮组，这是一个内联块元素。\n\n`ui-dropdown`内包含一组`ui-btn`或`ui-btngroup`，可以标记两个特定的按钮:\n\n- `slot="showbtn"` : 标记默认显示的按钮\n- `emitbtn` : 标记触发按钮组的按钮。\n\n组件内支持一个向下箭头图标，可以通过`<i class="morningicon">&#xe6b1;</i>`使用。\n\n#### 使用\n\n:::democode/html\n<ui-dropdown>\n    <ui-btn slot="showbtn" emitbtn>更多 <i class="morningicon">&#xe6b1;</i></ui-btn>\n    <ui-btn color="white">收藏</ui-btn>\n    <ui-btn color="white">修改</ui-btn>\n    <ui-btn color="danger">删除</ui-btn>\n</ui-dropdown>\n:::\n\n#### 分别标记`showbtn`和`emitbtn`\n\n分开标记`showbtn`和`emitbtn`，再配合`ui-btngroup`可以实现非常棒的效果。\n\n:::democode/html\n<ui-dropdown>\n    <ui-btngroup slot="showbtn">\n        <ui-btn color="success">立即购买</ui-btn>\n        \x3c!-- 这里的morningicon组件附带，可直接使用 --\x3e\n        <ui-btn color="minor" emitbtn><i class="morningicon">&#xe6b1;</i></ui-btn>\n    </ui-btngroup>\n    <ui-btn color="info">加入购物车</ui-btn>\n    \x3c!-- 这里的iconfont组件不附带 --\x3e\n    <ui-btn color="white"><i class="iconfont">&#xe6e2;</i> 收藏</ui-btn>\n    <ui-btn color="white"><i class="iconfont">&#xe70a;</i> 分享</ui-btn>\n</ui-dropdown>\n:::\n\n[[[形态]]]\n\n#### 支持\n\n|类型|支持|默认|\n|-|-|-|\n|尺寸|不支持|-|\n|色彩|不支持|-|\n|状态|不支持|-|\n\n<a href="/guide/status.html">查看形态文档</a>\n\n下拉式按钮组不支持形态，但可通过`ui-btn` / `ui-btngroup`自身的形态来控制。\n\n[[[配置]]]\n\n|KEY|描述|接受值|值类型|默认值|\n|-|-|-|-|-|\n|[auto-close](#auto-close)|点击下拉菜单中按钮后自动隐藏|`true`<br>`false`|Boolean|`true`|\n\n#### auto-close\n\n点击菜单中按钮后不会自动隐藏，需要点击`更多`来隐藏。\n\n:::democode/html\n<ui-dropdown :auto-close="false">\n    <ui-btn slot="showbtn" emitbtn>更多</ui-btn>\n    <ui-btn color="white">收藏</ui-btn>\n    <ui-btn color="white">修改</ui-btn>\n    <ui-btn color="danger">删除</ui-btn>\n</ui-dropdown>\n:::\n\n[[[方法]]]\n\n#### toggle([show])\n\n切换下拉按钮组是否显示。\n\n|KEY|可选|描述|接受值|值类型|默认值|\n|-|-|-|-|-|-|\n|show|YES|指定按钮组需要切换到隐藏或显示，若不设置则切换到相反的状态。|`undefined`<br>`true`<br>`false`|`Undefined`<br>`Boolean`|`undefined`|\n\n:::democode/html\n<ui-dropdown ref="demo1">\n    <ui-btn slot="showbtn" emitbtn>更多 <i class="morningicon">&#xe6b1;</i></ui-btn>\n    <ui-btn color="white">收藏</ui-btn>\n    <ui-btn color="white">修改</ui-btn>\n    <ui-btn color="danger">删除</ui-btn>\n</ui-dropdown>\n<br><br> \n<ui-link js="morning.findVM(\'demo1\').toggle();">切换相反状态</ui-link>\n<ui-link js="morning.findVM(\'demo1\').toggle(true);">切换至显示</ui-link>\n<ui-link js="morning.findVM(\'demo1\').toggle(false);">切换至隐藏</ui-link>\n:::\n\n[[[事件]]]\n\n#### emit\n\n当按钮组显示或隐藏时触发`emit`事件。\n\n:::vue/html\nnew Vue({\n    el : \'{$el}\',\n    template : \'{$template}\',\n    methods : {\n        echo : function () {\n            console.log(\'demo1.console1\', \'emit event!\');\n        }\n    }\n});\n---\n<div>\n    <ui-dropdown @emit="echo">\n        <ui-btn slot="showbtn" emitbtn>emit事件 <i class="morningicon">&#xe6b1;</i></ui-btn>\n        <ui-btn color="white">收藏</ui-btn>\n        <ui-btn color="white">修改</ui-btn>\n        <ui-btn color="danger">删除</ui-btn>\n    </ui-dropdown>\n</div>\n:::\n\n#### show\n\n当按钮组显示时触发`show`事件。\n\n:::vue/html\nnew Vue({\n    el : \'{$el}\',\n    template : \'{$template}\',\n    methods : {\n        echo : function () {\n            console.log(\'demo2.console1\', \'show event!\');\n        }\n    }\n});\n---\n<div>\n    <ui-dropdown @show="echo">\n        <ui-btn slot="showbtn" emitbtn>show事件 <i class="morningicon">&#xe6b1;</i></ui-btn>\n        <ui-btn color="white">收藏</ui-btn>\n        <ui-btn color="white">修改</ui-btn>\n        <ui-btn color="danger">删除</ui-btn>\n    </ui-dropdown>\n</div>\n:::\n\n#### hide\n\n当按钮组隐藏时触发`hide`事件。\n\n:::vue/html\nnew Vue({\n    el : \'{$el}\',\n    template : \'{$template}\',\n    methods : {\n        echo : function () {\n            console.log(\'demo3.console1\', \'hide event!\');\n        }\n    }\n});\n---\n<div>\n    <ui-dropdown @hide="echo">\n        <ui-btn slot="showbtn" emitbtn>hide事件 <i class="morningicon">&#xe6b1;</i></ui-btn>\n        <ui-btn color="white">收藏</ui-btn>\n        <ui-btn color="white">修改</ui-btn>\n        <ui-btn color="danger">删除</ui-btn>\n    </ui-dropdown>\n</div>\n:::\n\n#### 生命周期事件\n\n:::vue/html\nwindow.demoEventLifecycle = new Vue({\n    el : \'{$el}\',\n    template : \'{$template}\',\n    data : function () {\n        return {\n           text : \'下拉式按钮组\',\n           show : true\n        };\n    },\n    methods : {\n        echo : function (name) {\n            console.log(\'demoEventLifecycle.console1\', `${name} event!`);\n        }\n    }\n});\n---\n<div>\n    <ui-dropdown\n        ref="demoEventLifecycle"\n        v-show="show"\n        @created="echo(\'created\')"\n        @mounted="echo(\'mounted\')"\n        @before-update="echo(\'before-update\')"\n        @updated="echo(\'updated\')"\n        @before-destroy="echo(\'before-destroy\')"\n        @destroyed="echo(\'destroyed\')"\n    >\n\n        <ui-btn slot="showbtn" emitbtn>{*text*} <i class="morningicon">&#xe6b1;</i></ui-btn>\n        <ui-btn color="white">收藏</ui-btn>\n        <ui-btn color="white">修改</ui-btn>\n        <ui-btn color="danger">删除</ui-btn>\n\n    </ui-dropdown>\n\n    <br><br>\n\n    <ui-link js="window.demoEventLifecycle.text=\'生命周期事件\';">触发update</ui-link>\n    <ui-link js="morning.findVM(\'demoEventLifecycle\').$destroy();">触发destroy</ui-link>\n</div>\n:::\n\n[[[源码]]]\n\n<iframe src="/report/coverage/lib/components/dropdown/index.vue.html" name="codeFrame" frameborder="0" onload="this.height=codeFrame.document.body.scrollHeight"></iframe>\n')])])},i=[];t._withStripped=!0},24:function(n,e,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var t,i=o(2),u=(t=i)&&t.__esModule?t:{default:t};e.default={data:function(){return{page:"dropdown"}},components:{"doc-component":u.default}},n.exports=e.default},254:function(n,e,o){"use strict";o.r(e);var t=o(24),i=o.n(t);for(var u in t)"default"!==u&&function(n){o.d(e,n,function(){return t[n]})}(u);var r=o(123),d=o(0),c=!1;var l=function(n){c||o(616)},s=Object(d.a)(i.a,r.a,r.b,!1,l,null,null);s.options.__file="src/docs/pages/component/dropdown/index.vue",e.default=s.exports},255:function(n,e,o){"use strict";var t=u(o(1)),i=u(o(254));function u(n){return n&&n.__esModule?n:{default:n}}new t.default({el:"#root",render:function(n){return n(i.default)}})},616:function(n,e){}});