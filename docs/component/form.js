!function(n){function e(e){for(var t,u,m=e[0],a=e[1],l=e[2],d=0,c=[];d<m.length;d++)u=m[d],Object.prototype.hasOwnProperty.call(r,u)&&r[u]&&c.push(r[u][0]),r[u]=0;for(t in a)Object.prototype.hasOwnProperty.call(a,t)&&(n[t]=a[t]);for(f&&f(e);c.length;)c.shift()();return o.push.apply(o,l||[]),i()}function i(){for(var n,e=0;e<o.length;e++){for(var i=o[e],t=!0,m=1;m<i.length;m++){var a=i[m];0!==r[a]&&(t=!1)}t&&(o.splice(e--,1),n=u(u.s=i[0]))}return n}var t={},r={32:0},o=[];function u(e){if(t[e])return t[e].exports;var i=t[e]={i:e,l:!1,exports:{}};return n[e].call(i.exports,i,i.exports,u),i.l=!0,i.exports}u.m=n,u.c=t,u.d=function(n,e,i){u.o(n,e)||Object.defineProperty(n,e,{enumerable:!0,get:i})},u.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},u.t=function(n,e){if(1&e&&(n=u(n)),8&e)return n;if(4&e&&"object"==typeof n&&n&&n.__esModule)return n;var i=Object.create(null);if(u.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:n}),2&e&&"string"!=typeof n)for(var t in n)u.d(i,t,function(e){return n[e]}.bind(null,t));return i},u.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return u.d(e,"a",e),e},u.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},u.p="/";var m=window.webpackJsonp=window.webpackJsonp||[],a=m.push.bind(m);m.push=e,m=m.slice();for(var l=0;l<m.length;l++)e(m[l]);var f=a;o.push([308,0]),i()}({0:function(n,e){n.exports=Vue},308:function(n,e,i){"use strict";i.r(e);var t=i(0),r=i.n(t),o=function(){var n=this.$createElement,e=this._self._c||n;return e("doc-component",{attrs:{page:this.page,hasPadding:!0}},[e("script",{attrs:{type:"text/markdown"}},[this._v('\n# 表单 `<ui-form>`\n\n<doc-component-status page="form"></doc-component-status>\n\x3c!-- <doc-component-experimental></doc-component-not-experimental> --\x3e\n\n[[[开始]]]\n\n定义一组表单。\n\n所有的`ui-form`中具有`form-key`的表单组件都会被关联至`ui-form`中，`ui-form`组件的数值为一个对象，对象的键名为关联表单组件的`form-key`，键值为表单组件的值。\n\n表单组件中可以包含一些子元素：\n\n- `ui-formitem` : 表单项\n- `ui-formdivider` : 表单分频器\n\n#### `ui-formitem`表单项\n\n`ui-formitem`包含以下配置：\n\n- `label` : (String，支持`Vue Template`)表单项的名称\n- `note` : (String)表单项的备注\n- `required` : (Boolean)必填表单项\n\n#### `ui-formdivider`表单分频器\n\n如果一组表单太大，可以通过`ui-formdivider`来分割成多组（仅视觉上）。\n\n:::vue\n@name:使用\n---\n#demo\n>tpl\n<div style="width:420px;">\n    <ui-form>\n        <ui-formitem label="姓名">\n           <ui-textinput form-key="name"></ui-textinput>\n        </ui-formitem>\n        <ui-formitem label="简介">\n           <ui-textarea form-key="introduction"></ui-textarea>\n        </ui-formitem>\n    </ui-form>\n</div>\n:::\n\n:::vue\n@name:单项多表单\n---\n#demo\n>desc\n可以在一个`ui-formitem`中包含多个表单组件。\n<br>\n多个表单组件可以表单项中垂直排列，也可以行内排列。\n<br><br>\n同时可以配合表单组件的`form-name`和`form-note`一起使用实现更复杂的效果。\n>tpl\n<div style="width:420px;">\n    <ui-form>\n        <ui-formitem label="基本信息">\n           <ui-textinput form-key="firstName" form-name="名字" form-note="请填写名字"></ui-textinput>\n           <br>\n           <ui-textarea form-key="lastName" form-name="姓氏" form-note="请填写姓氏"></ui-textarea>\n        </ui-formitem>\n        <ui-formitem label="日期">\n            <ui-grid>\n                <ui-row>\n                    <ui-col :span="11">\n                        <ui-datepicker form-key="startDate"></ui-datepicker>\n                    </ui-col>\n                    <ui-col :span="2">\n                        <ui-center height-fill> - </center>\n                    </ui-col>\n                    <ui-col :span="11">\n                        <ui-datepicker form-key="endDate"></ui-datepicker>\n                    </ui-col>\n                </ui-row>\n            </ui-grid> \n        </ui-formitem>\n    </ui-form>\n</div>\n:::\n\n:::vue\n@name:表单项的备注\n---\n#demo\n>desc\n`ui-formitem`支持`note`配置来设置每一项表单的备注。\n>tpl\n<div style="width:420px;">\n    <ui-form label-width="120px">\n        <ui-formitem label="姓名" note="中文姓名">\n           <ui-textinput form-key="name"></ui-textinput>\n        </ui-formitem>\n        <ui-formitem label="简介" note="小于100字的简介">\n           <ui-textarea form-key="introduction"></ui-textarea>\n        </ui-formitem>\n        <ui-formitem label="导师" note="请选择一位导师">\n            <ui-select\n                form-key="tutor"\n                :list="{\n                    tim : \'Tim Boelaars\',\n                    andrew : \'Andrew Colin Beck\',\n                    gustavo : \'Gustavo Zambelli\',\n                    victor : \'Victor Erixon\',\n                    shaun : \'Shaun Moynihan\',\n                    emir : \'Emir Ayouni\',\n                    katherine : \'Katherine Rainey\',\n                    jax : \'Jax Berndt\',\n                    elizabeth : \'Elizabeth Chiu\',\n                    sara : \'Sara Nicely\',\n                    anna : \'Anna Broussard\'\n                }"\n            >\n           </ui-select>\n        </ui-formitem>\n        <ui-formitem label="日期">\n            <ui-grid>\n                <ui-row>\n                    <ui-col :span="11">\n                        <ui-datepicker form-key="startDate"></ui-datepicker>\n                    </ui-col>\n                    <ui-col :span="2">\n                        <ui-center height-fill> - </center>\n                    </ui-col>\n                    <ui-col :span="11">\n                        <ui-datepicker form-key="endDate"></ui-datepicker>\n                    </ui-col>\n                </ui-row>\n            </ui-grid> \n        </ui-formitem>\n        <ui-formitem label="性别">\n            <ui-radio\n                form-key="gender"\n                :list="{\n                    male : \'男士\',\n                    female : \'女士\'\n                }"\n            ></ui-radio>\n        </ui-formitem>\n    </ui-form>\n</div>\n:::\n\n:::vue\n@name:表单分频器\n---\n#demo\n>desc\n`ui-formitem`支持`note`配置来设置每一项表单的备注。\n>tpl\n<div style="width:420px;">\n    <ui-form label-width="120px">\n        <ui-formitem label="姓名" note="中文姓名">\n           <ui-textinput form-key="name"></ui-textinput>\n        </ui-formitem>\n        <ui-formitem label="简介" note="小于100字的简介">\n           <ui-textarea form-key="introduction"></ui-textarea>\n        </ui-formitem>\n        <ui-formdivider></ui-formdivider>\n        <ui-formitem label="导师" note="请选择一位导师">\n            <ui-select\n                form-key="tutor"\n                :list="{\n                    tim : \'Tim Boelaars\',\n                    andrew : \'Andrew Colin Beck\',\n                    gustavo : \'Gustavo Zambelli\',\n                    victor : \'Victor Erixon\',\n                    shaun : \'Shaun Moynihan\',\n                    emir : \'Emir Ayouni\',\n                    katherine : \'Katherine Rainey\',\n                    jax : \'Jax Berndt\',\n                    elizabeth : \'Elizabeth Chiu\',\n                    sara : \'Sara Nicely\',\n                    anna : \'Anna Broussard\'\n                }"\n            >\n           </ui-select>\n        </ui-formitem>\n        <ui-formitem label="日期">\n            <ui-grid>\n                <ui-row>\n                    <ui-col :span="11">\n                        <ui-datepicker form-key="startDate"></ui-datepicker>\n                    </ui-col>\n                    <ui-col :span="2">\n                        <ui-center height-fill> - </center>\n                    </ui-col>\n                    <ui-col :span="11">\n                        <ui-datepicker form-key="endDate"></ui-datepicker>\n                    </ui-col>\n                </ui-row>\n            </ui-grid> \n        </ui-formitem>\n        <ui-formitem label="性别">\n            <ui-radio\n                form-key="gender"\n                :list="{\n                    male : \'男士\',\n                    female : \'女士\'\n                }"\n            ></ui-radio>\n        </ui-formitem>\n    </ui-form>\n</div>\n:::\n\n:::vue\n@name:必填表单项\n---\n#demo\n>desc\n可以在`ui-formitem`中使用`required`配置来设置必填表单项。\n>tpl\n<div style="width:420px;">\n    <ui-form>\n        <ui-formitem label="姓名" required>\n           <ui-textinput form-key="name"></ui-textinput>\n        </ui-formitem>\n        <ui-formitem label="简介">\n           <ui-textarea form-key="introduction"></ui-textarea>\n        </ui-formitem>\n    </ui-form>\n</div>\n:::\n\n:::vue\n@name:表单项名称支持Vue Template\n---\n#demo\n>desc\n`label`配置支持`Vue Template`，同时可以通过`context`来访问到对应的Vue实例。\n>tpl\n<div style="width:420px;">\n    <ui-form>\n        <ui-formitem label="姓名">\n           <ui-textinput form-key="name"></ui-textinput>\n        </ui-formitem>\n        <ui-formitem label="\n            简介\n            <i id=\'demo3\' @click=\'context.echo\' class=\'mo-icon mo-icon-question-cf\'></i>\n            <ui-tip target=\'#demo3\'>这里是详细的说明</ui-tip>\n        ">\n           <ui-textarea form-key="introduction"></ui-textarea>\n        </ui-formitem>\n    </ui-form>\n</div>\n>script\n{\n    methods : {\n        echo : function () {\n            console.log(\'Hello!\');\n        }\n    }\n}\n:::\n\n[[[形态]]]\n\n#### 支持\n\n|类型|支持|默认|\n|-|-|-|\n|尺寸|不支持|-|\n|色彩|不支持|-|\n|状态|暂不支持(使用单个表单来控制)|-|\n\n<a href="/guide/status.html">查看形态文档</a> / <a href="/design/color.html">查看色彩文档</a>\n\n[[[配置]]]\n\n:::preset\n@name:formConfig\n@uikey:form\n@defaultValue:{name:\'Jim\',introduction:\'这里是简介\'}\n@wrapStyle:width:420px;\n@slot:<ui-formitem label="姓名"><ui-textinput form-key="name"></ui-textinput></ui-formitem><ui-formitem label="简介"><ui-textarea form-key="introduction"></ui-textarea></ui-formitem>\n:::\n\n:::vue\n@name:label-position\n---\n#config\n>conf-desc\n表单项名称的位置。\n>conf-accept\n`\'head-left\'` : 头部左对齐<br>`\'head-right\'` : 头部右对齐<br>`\'head-center\'` : 头部居中<br>`\'left-align\'` : 左侧左对齐<br>`\'center-align\'` : 左侧居中<br>`\'right-align\'` : 左侧右对齐<br>`\'center\'` : 左侧垂直居中<br>\n>conf-type\nString\n>conf-default\n`\'left-align\'`\n---\n#demo\n>desc\n头部左对齐的表单项名称。\n>tpl\n<div style="width:300px">\n    <ui-form label-position="head-left">\n        <ui-formitem label="姓名">\n           <ui-textinput form-key="name"></ui-textinput>\n        </ui-formitem>\n        <ui-formitem label="简介">\n           <ui-textarea form-key="introduction"></ui-textarea>\n        </ui-formitem>\n    </ui-form>\n</div>\n:::\n\n:::vue\n@name:label-width\n---\n#config\n>conf-desc\n表单项名称的宽度，仅在`label-position`不为`head-left`、`head-right`、`head-center`时有效。\n>conf-accept\n宽度(单位`px`、`%`等合法的CSS单位)\n>conf-type\nString\n>conf-default\n`\'left-align\'`\n---\n#demo\n>tpl\n<div style="width:300px">\n    <ui-form label-width="150px">\n        <ui-formitem label="姓名">\n           <ui-textinput form-key="name"></ui-textinput>\n        </ui-formitem>\n        <ui-formitem label="简介">\n           <ui-textarea form-key="introduction"></ui-textarea>\n        </ui-formitem>\n    </ui-form>\n</div>\n:::\n\n:::vue\n@name:rules\n---\n#config\n>conf-desc\n表单验证规则，采用[async-validator](https://github.com/yiminghe/async-validator)，用法详见：[https://github.com/yiminghe/async-validator](https://github.com/yiminghe/async-validator)。\n>conf-accept\n验证对象\n>conf-type\nObject\n>conf-default\n`{}`\n---\n#demo\n>tpl\n<div style="width:300px">\n    <ui-form\n        ref="demo1"\n        :rules="{\n            name : {\n                type : \'string\',\n                required: true,\n                message : \'姓名必须填写\'\n            }\n        }"\n    >\n        <ui-formitem label="姓名">\n           <ui-textinput form-key="name"></ui-textinput>\n        </ui-formitem>\n        <ui-formitem label="简介">\n           <ui-textarea form-key="introduction"></ui-textarea>\n        </ui-formitem>\n        <ui-btn @emit="$refs.demo1.validator()">提交表单</ui-btn>\n    </ui-form>\n</div>\n:::\n\n[[[方法]]]\n\n:::preset\n@name:formMethod\n@uikey:form\n@value:{name:\'Jim\',introduction:\'这里是简介\'}\n@defaultValue:{name:\'Jim\',introduction:\'这里是简介\'}\n@wrapStyle:width:420px;\n@slot:<ui-formitem label="姓名"><ui-textinput form-key="name"></ui-textinput></ui-formitem><ui-formitem label="简介"><ui-textarea form-key="introduction"></ui-textarea></ui-formitem>\n:::\n\n:::vue\n@name:validator(formKey)\n---\n#method\n>method-desc\n验证表单中的数值。\n>method-args\n|formKey|NO|用于验证某一项表单，需要验证表单的`form-key`|表单KEY|`String`|`undefined`|\n>method-return\n返回一个Promise，若参数是`true`则验证通过，否则为一个Error对象。\n---\n#demo\n>tpl\n<div style="width:420px;">\n    <ui-form\n        ref="demo2"\n        :rules="{\n            name : {\n                type : \'string\',\n                required: true,\n                message : \'姓名必须填写\'\n            },\n            introduction : {\n                type : \'string\',\n                required: true,\n                length : 10,\n                message : \'简介必须填写且长度大于10\'\n            }\n        }"\n    >\n        <ui-formitem label="姓名">\n           <ui-textinput form-key="name"></ui-textinput>\n        </ui-formitem>\n        <ui-formitem label="简介">\n           <ui-textarea form-key="introduction"></ui-textarea>\n        </ui-formitem>\n        <ui-btn @emit="$refs.demo2.validator()">验证表单</ui-btn>\n        <ui-btn @emit="$refs.demo2.validator(\'introduction\')">仅验证简介</ui-btn>\n    </ui-form>\n</div>\n:::\n\n[[[事件]]]\n\n:::preset\n@name:formEvent\n@uiname:表单\n@uikey:form\n@value:{name:\'Jim\',introduction:\'这里是简介\'}\n@wrapStyle:width:420px;\n@slot:<ui-formitem label="姓名"><ui-textinput form-key="name"></ui-textinput></ui-formitem><ui-formitem label="简介"><ui-textarea form-key="introduction"></ui-textarea></ui-formitem>\n:::\n\n[[[表单值]]]\n\n#### 值类型\n\n`Object` : 对象\n\n#### 值过滤\n\n- 若为`undefiend`会被转换为`{}`\n\n#### 值格式\n\n包含所有子表单组件数值的对象，对象的键名为子表单组件的`form-key`，对象的键值为表单组件的值。\n\n#### 默认值\n\n`{}`\n\n:::preset\n@name:formValue\n@uikey:form\n@uiname:表单\n@valueType:form\n@wrapStyle:width:420px;\n@slot:<ui-formitem label="姓名"><ui-textinput form-key="name"></ui-textinput></ui-formitem><ui-formitem label="简介"><ui-textarea form-key="introduction"></ui-textarea></ui-formitem>\n:::\n\n\n[[[源码]]]\n\n<iframe src="/report/coverage/lib/components/form/index.vue.html" name="codeFrame" frameborder="0" onload="this.height=codeFrame.document.body.scrollHeight"></iframe>\n\n')])])};o._withStripped=!0;var u={data:function(){return{page:"form"}},components:{"doc-component":i(2).a}},m=i(1),a=Object(m.a)(u,o,[],!1,null,null,null);a.options.__file="src/docs/pages/component/form/index.vue";var l=a.exports;new r.a({el:"#root",render:function(n){return n(l)}})}});