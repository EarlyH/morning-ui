!function(n){function e(e){for(var a,d,o=e[0],u=e[1],l=e[2],m=0,p=[];m<o.length;m++)d=o[m],i[d]&&p.push(i[d][0]),i[d]=0;for(a in u)Object.prototype.hasOwnProperty.call(u,a)&&(n[a]=u[a]);for(c&&c(e);p.length;)p.shift()();return r.push.apply(r,l||[]),t()}function t(){for(var n,e=0;e<r.length;e++){for(var t=r[e],a=!0,o=1;o<t.length;o++){var u=t[o];0!==i[u]&&(a=!1)}a&&(r.splice(e--,1),n=d(d.s=t[0]))}return n}var a={},i={15:0};var r=[];function d(e){if(a[e])return a[e].exports;var t=a[e]={i:e,l:!1,exports:{}};return n[e].call(t.exports,t,t.exports,d),t.l=!0,t.exports}d.m=n,d.c=a,d.d=function(n,e,t){d.o(n,e)||Object.defineProperty(n,e,{configurable:!1,enumerable:!0,get:t})},d.r=function(n){Object.defineProperty(n,"__esModule",{value:!0})},d.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return d.d(e,"a",e),e},d.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},d.p="/";var o=window.webpackJsonp=window.webpackJsonp||[],u=o.push.bind(o);o.push=e,o=o.slice();for(var l=0;l<o.length;l++)e(o[l]);var c=u;r.push([243,0]),t()}({1:function(n,e){n.exports=Vue},117:function(n,e,t){"use strict";t.d(e,"a",function(){return a}),t.d(e,"b",function(){return i});var a=function(){var n=this.$createElement,e=this._self._c||n;return e("doc-component",{attrs:{page:this.page,hasPadding:!0}},[e("script",{attrs:{type:"text/markdown"}},[this._v('\n# 日期选择器 `<ui-datepicker>`\n\n<doc-component-status page="datepicker"></doc-component-status>\n\n[[[开始]]]\n\n定义日期选择器。\n\n#### 使用\n\n:::democode/html\n<div style="width:300px;">\n    <ui-datepicker form-name="日期"></ui-datepicker>\n</div>\n:::\n\n#### 自定义日期格式\n\n日期选择器允许用户自定日期格式，使用中文时间：\n    \n:::democode/html\n<div style="width:300px;">\n    <ui-datepicker form-name="日期" :date="+new Date(\'2018-03-23\')" format="YYYY年MM月DD日" default-value="2018年03月23日"></ui-datepicker>\n</div>\n:::\n\n使用简短的年份：\n\n:::democode/html\n<div style="width:300px;">\n    <ui-datepicker form-name="日期" :date="+new Date(\'2018-03-23\')" format="YY年MM月DD日" default-value="18年03月23日"></ui-datepicker>\n</div>\n:::\n\n更多自定义格式见`format`配置。\n\n#### 范围日期选择\n\n:::democode/html\n<div style="width:360px;">\n    <ui-datepicker form-name="日期" :is-range="true"></ui-datepicker>\n</div>\n:::\n\n[[[形态]]]\n\n:::preset/html\nformStatus\n---\nuikey:datepicker\nstatusDefaultValue:\'2018-03-23\'\nstatusMoreAttr::date="+new Date(\'2018-03-23\')"\n:::\n\n[[[配置]]]\n\n:::preset/html\nformConfigTable\n---\n|[date](#date)|日历所在的日期，日历将会切换到`date`所在的月份|时间戳|Number|`+new Date()`|\n|[format](#format)|格式化展示的日期|日期格式化字符串(支持日期占位符见下方的演示)|String|`\'YYYY-MM-DD\'`|\n|[align](#align)|日期对齐方式|`\'left\'` : 左对齐<br>`\'center\'` : 居中对齐<br>`\'right\'` : 右对齐|String|`\'left\'`|\n|[selectable-range](#selectable-range)|可选日期范围，若不设置则不限。这是一个数组，支持以下格式：<br><br>`[开始日期, 结束日期]`: 指定单个可选范围<br>`[[开始日期1, 结束日期1], [开始日期2, 结束日期2]]`: 指定多个可选范围<br><br>可选日期将大于等于`开始日期`，小于等于`结束日期`。<br><br>`开始日期`和`结束日期`均为日期字符串需要符合`format`配置的日期格式。|日期范围数组|Array|`undefined`|\n|[is-range](#is-range)|选择日期区间，开启后可以选在一个日期段|`true`<br>`false`|Boolean|`false`|\n|[separator](#separator)|日期区间选择时中间的分隔内容，只有开启`is-range`才有效|分隔字符串|String|`\'至\'`|\n|[start-name](#start-name)|日期区间选择时`开始日期`表单显示的名称，若设为`false`则显示`form-name`，只有开启`is-range`才有效|任意字符串<br>`false`:显示`form-name`|String<br>Boolean|`\'开始日期\'`|\n|[end-name](#end-name)|日期区间选择时`结束日期`表单显示的名称，若设为`false`则显示`form-name`，只有开启`is-range`才有效。若设置了`hide-name`则不会显示|任意字符串`false`:显示`form-name`|String<br>Boolean|`\'结束日期\'`|\n:::\n\n:::preset/html\nformConfigDemo\n---\nuikey:datepicker\nconfigDefaultValue:\'2018-03-23\'\nconfigMoreAttr::date="+new Date(\'2018-03-23\')"\n:::\n\n#### date\n\n:::democode/html\n<div style="width:300px">\n    <ui-datepicker :date="+new Date(\'2018-03-23\')"></ui-datepicker>\n</div>\n:::\n\n#### format\n    \n`format`允许自定义组件展示的日期格式，支持以下占位符：\n\n|单位|占位符|示例|\n|-|-|-|\n|年份|YY|00, 01, ..., 99|\n||YYYY|1900, 1901, ..., 2099|\n|季度|Q|1, 2, 3, 4|\n||Qo|1st, 2nd, 3rd, 4th|\n|月份|M|1, 2, ..., 12|\n||Mo|1st, 2nd, ..., 12th|\n||MM|01, 02, ..., 12|\n||MMM|Jan, Feb, ..., Dec|\n||MMMM|January, February, ..., December|\n|一月中第几天|D|1, 2, ..., 31|\n||Do|1st, 2nd, ..., 31st|\n||DD|01, 02, ..., 31|\n|一周中第几天|d|0, 1, ..., 6|\n||do|0th, 1st, ..., 6th|\n||dd|Su, Mo, ..., Sa|\n||ddd|Sun, Mon, ..., Sat|\n||dddd|Sunday, Monday, ..., Saturday|\n|一年中第几天|DDD|1, 2, ..., 366|\n||DDDo|1st, 2nd, ..., 366th|\n||DDDD|001, 002, ..., 366|\n\n采用`|`分隔日期：\n\n:::democode/html\n<div style="width:300px;">\n    <ui-datepicker form-name="日期" :date="+new Date(\'2018-03-23\')" format="YYYY | MM | DD" default-value="2018 | 03 | 23"></ui-datepicker>\n</div>\n:::\n\n同时显示多种日期格式(显示多个日期时，最后一个优先级最高)：\n\n:::democode/html\n<div style="width:400px;">\n    <ui-datepicker form-name="日期" :date="+new Date(\'2018-03-23\')" format="YYYY-MM-DD | MMM DD, YYYY" default-value="2018-03-23 | Mar 23, 2018"></ui-datepicker>\n</div>\n:::\n\n#### align\n\n居中对齐：\n\n:::democode/html\n<div style="width:300px;">\n    <ui-datepicker form-name="日期" :date="+new Date(\'2018-03-23\')" default-value="2018-03-23" align="center"></ui-datepicker>\n</div>\n:::\n\n右对齐：\n\n:::democode/html\n<div style="width:300px;">\n    <ui-datepicker form-name="日期" :date="+new Date(\'2018-03-23\')" default-value="2018-03-23" align="right"></ui-datepicker>\n</div>\n:::\n\n#### selectable-range\n\n设置单个可选范围(2018-03-08至2018-03-23)：\n\n:::democode/html\n<div style="width:300px;">\n    <ui-datepicker form-name="日期" :date="+new Date(\'2018-03-23\')" :selectable-range="[\'2018-03-08\', \'2018-03-23\']"></ui-datepicker>\n</div>\n:::\n\n设置多个可选范围(2018-02-10至2018-02-20, 2018-02-20至2018-03-02, 2018-03-15至2018-03-25, 2018-03-20至2018-03-28, 2018-04-02至2018-04-05)：\n\n:::democode/html\n<div style="width:300px;">\n    <ui-datepicker form-name="日期" :date="+new Date(\'2018-03-23\')" :selectable-range="[[\'2018-02-10\', \'2018-02-20\'], [\'2018-02-23\', \'2018-03-02\'], [\'2018-03-15\', \'2018-03-25\'], [\'2018-03-20\', \'2018-03-28\'], [\'2018-04-02\', \'2018-04-05\']]"></ui-datepicker>\n</div>\n:::\n\n在使用`selectable-range`的同时开启`is-range`：\n\n:::democode/html\n<div style="width:300px;">\n    <ui-datepicker form-name="日期" :date="+new Date(\'2018-03-23\')" :selectable-range="[\'2018-03-08\', \'2018-03-23\']" is-range></ui-datepicker>\n</div>\n:::\n\n#### is-range\n\n:::democode/html\n<div style="width:360px;">\n    <ui-datepicker form-name="日期" :is-range="true"></ui-datepicker>\n</div>\n:::\n\n在开启`is-range`的情况下设置`default-value`:\n\n:::democode/html\n<div style="width:360px;">\n    <ui-datepicker form-name="日期" :date="+new Date(\'2018-03-23\')" :is-range="true" :default-value="[\'2018-03-10\', \'2018-03-20\']"></ui-datepicker>\n</div>\n:::\n\n#### separator\n\n:::democode/html\n<div style="width:360px;">\n    <ui-datepicker form-name="日期" :is-range="true" separator="~"></ui-datepicker>\n</div>\n:::\n\n#### start-name\n\n:::democode/html\n<div style="width:360px;">\n    <ui-datepicker form-name="日期" :is-range="true" start-name="发车日期"></ui-datepicker>\n</div>\n:::\n\n若设为`false`则显示`form-name`：\n\n:::democode/html\n<div style="width:360px;">\n    <ui-datepicker form-name="日期" :is-range="true" :start-name="false"></ui-datepicker>\n</div>\n:::\n\n#### end-name\n\n:::democode/html\n<div style="width:360px;">\n    <ui-datepicker form-name="日期" :is-range="true" end-name="到达日期"></ui-datepicker>\n</div>\n:::\n\n若设为`false`则显示`form-name`：\n\n:::democode/html\n<div style="width:360px;">\n    <ui-datepicker form-name="日期" :is-range="true" :end-name="false"></ui-datepicker>\n</div>\n:::\n\n[[[方法]]]\n\n:::preset/html\nformMethod\n---\nuikey:datepicker\nmethodValue:\'2018-03-23\'\nmethodDefaultValue:\'2018-03-23\'\n:::\n\n[[[事件]]]\n\n:::preset/html\nformEvent\n---\nuikey:datepicker\neventValue:\'2018-03-23\'\n:::\n    \n#### input-focus\n\n当日期选择器的输入框聚焦时触发。\n\n:::vue/html\nnew Vue({\n    el : \'{$el}\',\n    template : \'{$template}\',\n    methods : {\n        echo : function () {\n            console.log(\'demo1.console1\', \'input-focus event!\');\n        }\n    }\n});\n---\n<div>\n    <div style="width:300px;">\n        <ui-datepicker ref="demo1" @input-focus="echo"></ui-datepicker>\n    </div>\n</div>\n:::\n    \n#### input-blur\n\n当日期选择器的输入框失焦时触发。\n\n:::vue/html\nnew Vue({\n    el : \'{$el}\',\n    template : \'{$template}\',\n    methods : {\n        echo : function () {\n            console.log(\'demo2.console1\', \'input-blur event!\');\n        }\n    }\n});\n---\n<div>\n    <div style="width:300px;">\n        <ui-datepicker ref="demo2" @input-blur="echo"></ui-datepicker>\n    </div>\n</div>\n:::\n    \n#### focus\n\n当日期选择器聚焦时触发。\n\n:::vue/html\nnew Vue({\n    el : \'{$el}\',\n    template : \'{$template}\',\n    methods : {\n        echo : function () {\n            console.log(\'demo3.console1\', \'focus event!\');\n        }\n    }\n});\n---\n<div>\n    <div style="width:300px;">\n        <ui-datepicker ref="demo3" @focus="echo"></ui-datepicker>\n    </div>\n</div>\n:::\n    \n#### blur\n\n当日期选择器失焦时触发。\n\n:::vue/html\nnew Vue({\n    el : \'{$el}\',\n    template : \'{$template}\',\n    methods : {\n        echo : function () {\n            console.log(\'demo4.console1\', \'blur event!\');\n        }\n    }\n});\n---\n<div>\n    <div style="width:300px;">\n        <ui-datepicker ref="demo4" @blur="echo"></ui-datepicker>\n    </div>\n</div>\n:::\n\n[[[表单值]]]\n\n#### 值类型\n\n- `Array` : 数组\n- `String` : 字符串(按`format`配置格式化)\n\n#### 值过滤\n\n- 若是范围日期选择(开启`isRange`配置)，则数值是一个字符串，则将数值转换成数组，该字符串作为第一项       \n- 若是单一日期选择(未开启`isRange`配置)，且数值是一个数组，则取第一项\n- 若数值的类型是字符串则检测字符串的日期格式是否符合`format`配置，若不符合尝试转换成符合的格式，若无法转换则转换成`1971-01-01`的符合`format`的日期字符串。\n- 若数值的类型是一个数组，且数组长度为`0`则转换为`undefined`\n- 若数值的类型是一个数组，且数组长度大于`2`，则过滤多余的项目，只保留两项\n- 若数值的类型是一个数组，且数组长度大于`0`且小于`3`，会过滤数组中所有不是字符串类型的项目，然后按照第三条规则，对所有字符串项目进行过滤\n- 若数值的类型是一个数组，且第二项代表的日期时间大于第一项，则对换数组的两项\n\n#### 值格式\n\n若是单一日期选择，则是日期字符串(符合`format`的格式化规则)\n若是范围日期选择，则是长度为2的数组，数组中第一项是开始日期的日期字符串(符合`format`的格式化规则)，数组中第二项是结束日期的日期字符串(符合`format`的格式化规则)。\n\n#### 默认值\n\n`undefined`\n\n#### 输入/输出示例\n\n:::repeat/html\nformValueType:datepicker\n---\n<div>\n    <p>{$valueType}类型</p>\n    <div style="width:300px;">\n        <ui-datepicker ref="demoType{$valueType}"></ui-datepicker>\n    </div>\n    <br>\n    <ui-link js="window.morning.findVM(\'demoType{$valueType}\').set({$&valueContent})">设置{$valueType}类型</ui-link>\n    <ui-link js="alert(window.morning.findVM(\'demoType{$valueType}\').getJson())">获取表单JSON值</ui-link>\n</div>\n<br>\n<br>\n:::\n\n[[[源码]]]\n\n<iframe src="/report/coverage/lib/components/datepicker/index.vue.html" name="codeFrame" frameborder="0" onload="this.height=codeFrame.document.body.scrollHeight"></iframe>\n\n')])])},i=[];a._withStripped=!0},18:function(n,e,t){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var a,i=t(2),r=(a=i)&&a.__esModule?a:{default:a};e.default={data:function(){return{page:"datepicker"}},components:{"doc-component":r.default}},n.exports=e.default},242:function(n,e,t){"use strict";t.r(e);var a=t(18),i=t.n(a);for(var r in a)"default"!==r&&function(n){t.d(e,n,function(){return a[n]})}(r);var d=t(117),o=t(0),u=!1;var l=function(n){u||t(604)},c=Object(o.a)(i.a,d.a,d.b,!1,l,null,null);c.options.__file="src/docs/pages/component/datepicker/index.vue",e.default=c.exports},243:function(n,e,t){"use strict";var a=r(t(1)),i=r(t(242));function r(n){return n&&n.__esModule?n:{default:n}}new a.default({el:"#root",render:function(n){return n(i.default)}})},604:function(n,e){}});