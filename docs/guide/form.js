!function(n){function e(e){for(var r,i,u=e[0],d=e[1],m=e[2],s=0,p=[];s<u.length;s++)i=u[s],o[i]&&p.push(o[i][0]),o[i]=0;for(r in d)Object.prototype.hasOwnProperty.call(d,r)&&(n[r]=d[r]);for(l&&l(e);p.length;)p.shift()();return a.push.apply(a,m||[]),t()}function t(){for(var n,e=0;e<a.length;e++){for(var t=a[e],r=!0,u=1;u<t.length;u++){var d=t[u];0!==o[d]&&(r=!1)}r&&(a.splice(e--,1),n=i(i.s=t[0]))}return n}var r={},o={109:0},a=[];function i(e){if(r[e])return r[e].exports;var t=r[e]={i:e,l:!1,exports:{}};return n[e].call(t.exports,t,t.exports,i),t.l=!0,t.exports}i.m=n,i.c=r,i.d=function(n,e,t){i.o(n,e)||Object.defineProperty(n,e,{enumerable:!0,get:t})},i.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},i.t=function(n,e){if(1&e&&(n=i(n)),8&e)return n;if(4&e&&"object"==typeof n&&n&&n.__esModule)return n;var t=Object.create(null);if(i.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:n}),2&e&&"string"!=typeof n)for(var r in n)i.d(t,r,function(e){return n[e]}.bind(null,r));return t},i.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return i.d(e,"a",e),e},i.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},i.p="/";var u=window.webpackJsonp=window.webpackJsonp||[],d=u.push.bind(u);u.push=e,u=u.slice();for(var m=0;m<u.length;m++)e(u[m]);var l=d;a.push([667,0]),t()}({1:function(n,e){n.exports=Vue},333:function(n,e,t){"use strict";var r=function(){var n=this.$createElement,e=this._self._c||n;return e("doc-guide",{attrs:{page:this.page,hasPadding:!0}},[e("script",{attrs:{type:"text/markdown"}},[this._v('\n# 表单\n\n表单组件区别于样式和交互组件，包含很多通用的逻辑。MorningUI的全局对象上也对表单组件进行了扩展。\n\n## 通用逻辑\n\n所有的表单都支持以下这些通用逻辑。\n\n#### 表单形态\n\n表单组件支持三种形态：`normal`、`readonly`、`disabled`。\n\n`readonly`状态下的表单用户无法修改表单值，但可通过JS可以修改，一般用于展示。\n\n`disabled`状态下的表单无法修改表单值，一般用于展示。\n\n详见：[disabled和readonly的区别](/guide/status.html#disabled和readonly的区别)。\n\n#### 表单配置\n\n表单组件支持下面几种通用配置：\n\n- form-name : 表单的名称(用于显示)\n- form-note : 表单的备注(用于显示)\n- form-key : 表单的KEY(用于逻辑中作为识别标示)\n- group : 表单组\n- hide-name : 隐藏表单名(所有表单默认都有显示表单名的位置，你可以隐藏后自行设置)\n- clearable : 显示清空表单按钮\n\n#### 表单方法\n\n表单组件支持下面几种通用方法：\n\n- set() : 设置表单的值\n- get() : 获取表单的值\n- getJson() : 获取表单的JSON值\n- setName() : 设置表单的名称\n- getName() : 获取表单的名称\n- setKey() : 设置表单的KEY\n- getKey() : 获取表单的KEY\n- setGroup() : 设置表单组件所属的表单组\n- getGroup() : 获取表单组件所属的表单组\n- addGroup() : 将表单组件添加到表单组\n- removeGroup() : 将表单组件从表单组中移除\n\n#### 表单事件\n\n表单组件支持下面几种通用事件：\n\n- value-change : 表单值发生改变时触发(表单初始化时的数值变动不会触发此事件)\n- created : 组件实例创建后(组件生命周期事件，等同于vue中的`created`)\n- mounted : 组件挂载到DOM后(组件生命周期事件，等同于vue中的`mounted`)\n- before-update : 组件更新前(组件生命周期事件，等同于vue中的`before-update`)\n- updated : 组件更新后(组件生命周期事件，等同于vue中的`updated`)\n- before-destroy : 组件销毁前(组件生命周期事件，等同于vue中的`before-destroy`)\n- destroyed : 组件销毁后(组件生命周期事件，等同于vue中的`destroyed`)\n\n## 表单值\n\n表单中所有的值都有支持的类型，若输入的值不符合表单支持的类型，表单会进行转换。\n\n所有的表单都会说明：\n\n- 值类型 : 表单支持数值的类型\n- 值过滤 : 表单过滤数值的条件\n- 值格式 : 表单数值格式说明\n- 默认值\n\n## 获取/设置表单值\n\n#### 通过`v-model`\n\n可以使用`v-model`指令将表单值绑定到父视图中，使用方法与Vue官方[表单输入绑定](https://cn.vuejs.org/v2/guide/forms.html)一致。\n\n绑定是双向的，组件值改变会同步到父视图的data中，父视图的值改变也会改变组件的值：\n\n:::vue\n#demo\n>tpl\n<div style="width:400px;">\n    <p>1. 修改下面表单内容，然后点击<code>获取父视图的data</code>，父视图的数据同步变化</p>\n    <p>2. 点击<code>修改父视图的data</code>，表单的值也会变化</p>\n    <ui-formgroup>\n    <ui-textinput v-model="name" form-name="姓名"></ui-textinput>\n    <br>\n    <ui-radio :list="{male:\'Male\',female:\'Female\'}" v-model="gender"></ui-radio>\n    </ui-formgroup>\n    <br><br>\n    <ui-btn js="alert(this.getData());">获取姓名及性别</ui-btn>\n    <ui-btn js="this.setData();">修改姓名及性别</ui-btn>\n</div>\n>script\n{\n    data : {\n        name : "Jim",\n        gender : "male",\n    },\n    methods : {\n        getData : function() {\n            return JSON.stringify({\n                name : this.name,\n                gender : this.gender\n            })\n        },\n        setData : function() {\n            this.name = \'Sam\';\n            this.gender = \'female\';\n        }\n    }\n}\n:::\n\n注意：如果表单处于`disable`状态，父视图中的数值变化将不会同步到表单(仅在初始化时`v-model`的数值会同步到表单)。\n\n`v-model`指令的用法详见：<a href="https://cn.vuejs.org/v2/guide/forms.html" target="_blank">表单输入绑定</a>\n\n#### 通过表单组件vm\n\n若组件设置了`ref`，也可以通过`$refs`来获取组件的vm，调用组件的vm上的`get()` / `getJson()` / `set()`方法来获取/设置表单值。\n\n:::vue\n#demo\n>tpl\n<div style="width:400px;">\n    <ui-formgroup>\n    <ui-textinput ref="name" form-name="姓名" v-model="name"></ui-textinput>\n    <br>\n    <ui-radio :list="{male:\'Male\',female:\'Female\'}" ref="gender" v-model="gender"></ui-radio>\n    </ui-formgroup>\n    <br><br>\n    <ui-btn js="alert(this.getData());">获取姓名及性别</ui-btn>\n</div>\n>script\n{\n    data : {\n        name : "Jim",\n        gender : "male",\n    },\n    methods : {\n        getData : function() {\n            return JSON.stringify({\n                name : this.$refs.name.get(),\n                gender : this.$refs.gender.get()\n            })\n        },\n        getGender : function() {\n            this.$refs.name.get(\'Sam\');\n            this.$refs.gender.get(\'female\');\n        }\n    }\n}\n:::\n\n其中`get()`和`getJson()`的区别是，前者返回原始数据类型，后者返回JSON序列化后的数据，若数据需要和第三方交互采用字符串会更通用。\n\n#### 通过表单组\n\n通过在组件上设置`group`属性，可以将表单组件添加到同一个表单组。\n\n表单组内的所有表单KEY和值都会以键值对的形式存在一个对象中。\n\n你可以通过两种方式获取：\n\n- `morning.getGroup(groupKey)` : 获取指定表单组的数据\n- `morning.getGroupJson(groupKey)` : 获取指定表单组的JSON数据\n\n:::vue\n#demo\n>tpl\n<div>\n    <div style="width:300px;">\n        <ui-textinput group="demo1" form-key="name" form-name="姓名" v-model="valueName"></ui-textinput>\n        <br> \n        <ui-textinput group="demo1" form-key="age" form-name="年龄" v-model="valueAge"></ui-textinput>\n        <br> \n        <ui-radio :list="{male:\'Male\',female:\'Female\'}" group="demo1" form-key="gender" form-name="性别" v-model="valueGender"></ui-radio>\n        <br> \n        <ui-multiinput group="demo1" form-key="tags" form-name="标签" v-model="valueTags"></ui-multiinput>\n    </div>\n    <br><br>\n    <ui-btn js="console.log(\'demo1 data\', window.morning.getGroup(\'demo1\'));">在Console输出表单组数据</ui-btn>\n    <ui-btn js="console.log(\'demo1 data\', window.morning.getGroupJson(\'demo1\'));">在Console输出表单组JSON数据</ui-btn>\n</div>\n>script\n{\n    data : {\n        valueName : "Jim",\n        valueAge : "17",\n        valueGender : "male",\n        valueTags : [\'Happy\'],\n    }\n}\n:::\n\n一组表单也可以同时设置值：\n\n- `morning.setGroup(groupKey, dataObject)` : 设置指定表单组的数据\n- `morning.setGroupJson(groupKey, dataJson)` : 设置指定表单组的JSON数据\n\n`dataObject`是一组键值对，键名为表单的KEY，键值是需要设置的表单值。`dataJson`是`dataObject`经过JSON序列化后的字符串。\n\n:::vue\n#demo\n>tpl\n<div>\n    <div style="width:300px;">\n        <ui-textinput group="demo2" form-key="name" form-name="姓名"></ui-textinput>\n        <br> \n        <ui-textinput group="demo2" form-key="age" form-name="年龄"></ui-textinput>\n        <br> \n        <ui-radio :list="{male:\'Male\',female:\'Female\'}" group="demo2" form-key="gender" form-name="性别"></ui-radio>\n        <br> \n        <ui-multiinput group="demo2" form-key="tags" form-name="标签"></ui-multiinput>\n    </div>\n    <br><br>\n    <ui-btn js="window.morning.setGroup(\'demo2\', {name:\'Jim\', age:\'17\', gender: \'male\', tags: [\'Happy\']});">通过对象设置一组表单值</ui-btn>\n    <ui-btn js=\'window.morning.setGroupJson("demo2", "{\\"name\\":\\"Jim\\",\\"age\\":\\"17\\",\\"gender\\":\\"male\\",\\"tags\\":[\\"Happy\\"]}");\'>通过JSON设置一组表单值</ui-btn>\n</div>\n:::\n\n##### 设置部分值\n\n在`dataJson`或`dataObject`中你可以只设置部分表单的数值，比如：\n\n:::vue\n#demo\n>tpl\n<div>\n    <div style="width:300px;">\n        <ui-textinput group="demo3" form-key="name" form-name="姓名"></ui-textinput>\n        <br> \n        <ui-radio :list="{male:\'Male\',female:\'Female\'}" group="demo3" form-key="gender" form-name="性别"></ui-radio>\n    </div>\n    <br><br>\n    <ui-btn js="window.morning.setGroup(\'demo3\', {gender: \'male\'});">只设置性别表单</ui-btn>\n</div>\n:::\n\n##### 清空表单的值\n\n在`dataJson`或`dataObject`中若显式的设置`undefined`，则会清空对应表单的值，比如：\n\n:::vue\n#demo\n>tpl\n<div>\n    <div style="width:300px;">\n        <ui-textinput group="demo4" form-key="name" form-name="姓名" v-model="valueName"></ui-textinput>\n        <br> \n        <ui-radio :list="{male:\'Male\',female:\'Female\'}" group="demo4" form-key="gender" form-name="性别" v-model="valueGender"></ui-radio>\n    </div>\n    <br><br>\n    <ui-btn js="window.morning.setGroup(\'demo4\', {gender:undefined});">清空性别表单</ui-btn>\n</div>\n>script\n{\n    data : {\n        valueName : "Jim",\n        valueGender : "male"\n    }\n}\n:::\n\n##### 清空一组表单的值\n\n通过`cleanGroup`方法可以清空一整组表单的值，比如：\n\n:::vue\n#demo\n>tpl\n<div>\n    <div style="width:300px;">\n        <ui-textinput group="demo5" form-key="name" form-name="姓名" v-model="valueName"></ui-textinput>\n        <br> \n        <ui-radio :list="{male:\'Male\',female:\'Female\'}" group="demo5" form-key="gender" form-name="性别" v-model="valueGender"></ui-radio>\n    </div>\n    <br><br>\n    <ui-btn js="window.morning.cleanGroup(\'demo5\');">清空整组表单</ui-btn>\n</div>\n>script\n{\n    data : {\n        valueName : "Jim",\n        valueGender : "male"\n    }\n}\n:::\n\n## 全局扩展\n\nMorningUI的全局对象`morning`上对表单组件进行了扩展，可以让使用者更方便的获取、设置表单值。详见：[基础/全局扩展](/guide/morning.html)\n\n')])])},o=[];r._withStripped=!0,t.d(e,"a",function(){return r}),t.d(e,"b",function(){return o})},55:function(n,e,t){"use strict";t.r(e);var r=t(56),o=t.n(r);for(var a in r)"default"!==a&&function(n){t.d(e,n,function(){return r[n]})}(a);e.default=o.a},56:function(n,e,t){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r,o=t(3),a=(r=o)&&r.__esModule?r:{default:r};e.default={data:function(){return{page:"form"}},components:{"doc-guide":a.default}},n.exports=e.default},667:function(n,e,t){"use strict";var r=a(t(1)),o=a(t(668));function a(n){return n&&n.__esModule?n:{default:n}}new r.default({el:"#root",render:function(n){return n(o.default)}})},668:function(n,e,t){"use strict";t.r(e);var r=t(333),o=t(55);for(var a in o)"default"!==a&&function(n){t.d(e,n,function(){return o[n]})}(a);var i=t(0),u=Object(i.a)(o.default,r.a,r.b,!1,null,null,null);u.options.__file="src/docs/pages/guide/form/index.vue",e.default=u.exports}});