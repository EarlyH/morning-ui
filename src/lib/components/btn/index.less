@sizeName: xxl, xl, l, m, s, xs, xxs;
@sizeFontSize: 1.3, 1.1, 1, 0.8125, 0.75, 0.75, 0.75;
@sizeIFontSize: 2.2, 1.8, 1.6, 1.4, 1.2, 1, 0.75;
@sizeMloaderWidth: 1.6em, 1.4em, 1.3em, 1.2em, 1.2em, 1.2em, 1em;
@colorName: t, lt, dt, s, w, d, p, m, i, bk, wh;
@colorMainColor: @colorTheme, @colorLightTheme, @colorDarkTheme, @colorSuccess, @colorWarning, @colorDanger, @colorPrimary, @colorMinor, @colorInfo, @colorBlack, @colorWhite;

.setup-color(@selector, @colorHex, @name) {
    @{selector} {
        background-color: @colorHex;
        color: if(
            (
                @name = wh or
                @name = n1 or
                @name = n2 or
                @name = n3 or
                @name = n4 or
                @name = n5
            ),
            @colorBlack,
            @colorWhite
        );

        .mo-loader{
            .mo-loader-path{
                stroke: if(
                    (
                        @name = wh or
                        @name = n1 or
                        @name = n2 or
                        @name = n3 or
                        @name = n4 or
                        @name = n5
                    ),
                    @colorNeutral10,
                    @colorWhite
                );
            }
        }

        // TODO : plain;
        &.plain{
            color: @colorHex;
            border-color: darken(@colorHex, 5%);

            .mo-loader{
                .mo-loader-path{
                    stroke: @colorHex;
                }
            }
        }

        &:not(.st-disabled):hover,
        &.st-hover{
            background-color: darken(@colorHex, 5%);

            &.plain{
                color: @colorWhite;
            }
        }

        &.st-disabled,
        &.st-disabled.plain{
            border: none;
            background-color: @colorHex;
        }
    }
};

mor-btn{
    display: inline-block;
    padding: 0 1.1em;
    border-radius: 0.3em;
    position: relative;
    height: 2.8em;
    line-height: calc(2.8em + 2px);
    box-sizing: border-box;

    &:hover{
        cursor: pointer;
    }

    &.plain{
        border: 1px #FFF solid;
    }

    &.round{
        border-radius: 100em;
    }

    &.circle{
        width: 2.8em;
        overflow: hidden;
        border-radius: 100em;
        padding: 0;
        text-align: center;
        position: relative;

        > i{
            line-height: calc(2.8em - 1px);
            position: absolute;
            left: 50%;
            top: 50%;
            transform: translate(-50%, -50%);
        }

        > mor-img{
            width: 100%;
            height: 100%;

            > img{
                position: absolute;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);
            }
        }

        &:not(.st-disabled):hover,
        &.st-hover{
            > mor-img::after{
                content: ' ';
                width: 100%;
                height: 100%;
                background: rgba(0, 0, 0, 0.15);
                position: absolute;
                left: 0;
                top: 0;
            }
        }

        &:not(.st-disabled):active,
        &.st-active{
            > mor-img::after{
                content: ' ';
                width: 100%;
                height: 100%;
                background: rgba(0, 0, 0, 0.25);
                position: absolute;
                left: 0;
                top: 0;
            }
        }
    }

    &.loading{
        .mo-loader{
            position: absolute;
            left: 50%;
            top: 50%;
            transform: translate(-50%, -50%);

            .mo-loader-path{
                opacity: 0.85;
            }
        }

        span{
            opacity: 0;
        }

        &:hover{
            cursor: default;
        }
    }

    each(@sizeName, {
        & when(@value = m) {
            font-size: @fontSize*extract(@sizeFontSize, @index);
            
            > i{
                font-size: @fontSize*extract(@sizeIFontSize, @index);
            }

            .mo-loader{
                width: extract(@sizeMloaderWidth, @index);
            }
        }

        &.si-@{value}{
            font-size: @fontSize*extract(@sizeFontSize, @index);
            
            > i{
                font-size: @fontSize*extract(@sizeIFontSize, @index);
            }

            .mo-loader{
                width: extract(@sizeMloaderWidth, @index);
            }
        }
    });

    &.si-s{
        height: 2.6em;
        line-height: 2.6em;
        padding: 0 0.8em;

        &.circle{
            width: 2.6em;
        }
    }

    &.si-xs{
        height: 2.2em;
        line-height: 2.2em;
        padding: 0 0.6em;

        &.circle{
            width: 2.2em;
        }
    }

    &.si-xxs{
        height: 1.8em;
        line-height: 1.8em;
        padding: 0 0.4em;

        &.circle{
            width: 1.8em;
        }
    }

    each(@colorName, {
        & when(@value = t) {
            .setup-color(~'&', extract(@colorMainColor, @index), @value);
        }
        
        .setup-color(e(%('&.co-%S', @value)), extract(@colorMainColor, @index), @value);
    });

    each(range(11), {
        @colorName : 'colorNeutral@{value}';
        
        .setup-color(e(%('&.co-n%S', @value)), @@colorName, e(%('n%S', @value)));

        &.co-n@{value}{
            &.plain{
                background-color: transparent;
                border-color: @@colorName;
                color: @@colorName;

                .mo-loader{
                    .mo-loader-path{
                        stroke: @@colorName;
                    }
                }
            }

            &:not(.st-disabled):hover,
            &.st-hover{
                background-color: if((@value > 5), lighten(@@colorName, 5%), darken(@@colorName, 5%));

                &.plain{
                    color: if((@value > 5), @colorWhite, @colorBlack);
                }
            }

            &:not(.st-disabled):active,
            &.st-active{
                background-color: if((@value > 5), lighten(@@colorName, 10%), darken(@@colorName, 10%));
                box-shadow: 0 0 5px rgba(0, 0, 0, 0.4) inset;
            }

            &.st-disabled,
            &.st-disabled.plain{
                border: none;
                background-color: @@colorName;
                color: if((@value > 5), lighten(@@colorName, 40%), darken(@@colorName, 30%));
            }
        }
    });

    &.co-t{
        &.plain{
            background-color: lighten(@colorTheme, 35%);
        }

        &.st-disabled,
        &.st-disabled.plain{
            color: lighten(@colorTheme, 25%);
        }
    }

    &.co-lt{
        &.plain{
            background-color: lighten(@colorLightTheme, 25%);
        }

        &.st-disabled,
        &.st-disabled.plain{
            color: lighten(@colorLightTheme, 20%);
        }
    }

    &.co-dt{
        &.plain{
            background-color: lighten(@colorDarkTheme, 35%);
        }

        &.st-disabled,
        &.st-disabled.plain{
            color: lighten(@colorDarkTheme, 25%);
        }
    }

    &.co-s{
        &.plain{
            background-color: lighten(@colorSuccess, 38%);
        }

        &.st-disabled,
        &.st-disabled.plain{
            color: lighten(@colorSuccess, 35%);
        }
    }

    &.co-w{
        &.plain{
            background-color: lighten(@colorWarning, 32%);
        }

        &.st-disabled,
        &.st-disabled.plain{
            color: lighten(@colorWarning, 35%);
        }
    }

    &.co-d{
        &.plain{
            background-color: lighten(@colorDanger, 38%);
        }

        &.st-disabled,
        &.st-disabled.plain{
            color: lighten(@colorDanger, 35%);
        }
    }

    &.co-p{
        &.plain{
            background-color: lighten(@colorPrimary, 42%);
        }

        &.st-disabled,
        &.st-disabled.plain{
            color: lighten(@colorPrimary, 35%);
        }
    }

    &.co-m{
        &.plain{
            background-color: lighten(@colorMinor, 26%);
        }

        &.st-disabled,
        &.st-disabled.plain{
            color: lighten(@colorMinor, 25%);
        }
    }

    &.co-i{
        &.plain{
            background-color: lighten(@colorInfo, 60%);
        }

        &.st-disabled,
        &.st-disabled.plain{
            color: lighten(@colorInfo, 20%);
        }
    }

    &.co-bk{
        &.plain{
            background-color: lighten(@colorBlack, 55%);
            border-color: @colorBlack;
        }

        &.st-disabled,
        &.st-disabled.plain{
            color: lighten(@colorBlack, 40%);
        }
    }

    &.co-wh{
        &.plain{
            background-color: transparent;
            border-color: darken(@colorWhite, 3%);
        }

        &:not(.st-disabled):hover,
        &.st-hover{
            background-color: darken(@colorWhite, 3%);

            &.plain{
                color: @colorNeutral10;
            }
        }

        &:not(.st-disabled):active,
        &.st-active{
            background-color: darken(@colorWhite, 6%);
        }

        &.st-disabled,
        &.st-disabled.plain{
            color: darken(@colorWhite, 30%);
        }
    }

    &.st-normal{}

    &.st-hover{}

    &.st-active{
        box-shadow: 0 0 5px rgba(0, 0, 0, 0.25) inset;
    }

    &:not(.st-disabled):active{
        box-shadow: 0 0 5px rgba(0, 0, 0, 0.25) inset;
    }

    &.st-disabled{
        box-shadow: 0 0 5px rgba(0, 0, 0, 0.6) inset;
        cursor: not-allowed;
    }

    &.st-apparent{
        animation-name: apparent;
        animation-duration: 1s;
        animation-timing-function: linear;
        animation-iteration-count: infinite;

        &:hover{
            animation-name: none;
        }
    }

    // default status
    &{
        .co-t;
        .st-normal;
    }
}
