@import '~Common/var.less';

.generate-col(@prefix, @n, @i: 1) when (@i < @n) {
    .@{prefix}offset-@{i} {
        margin-left: @gridColumnWidth*@i + @gridGutterWidth*@i;
    }
}

.generate-col(@prefix, @n, @i: 1) when (@i =< @n) {
    .@{prefix}c-@{i} {
        &:extend(mor-grid .c-n);
    }
}

.generate-col(@prefix, @n, @i: 1) when (@i =< @n) {
    .@{prefix}c-@{i} {
        width: if((@i = @n), 100%, @gridColumnWidth*@i + @gridGutterWidth*(@i - 1));
    }
    .generate-col(@prefix, @n, (@i + 1));
}

.generate-col-nogap(@prefix, @n, @i: 1) when (@i < @n) {
    .@{prefix}offset-@{i} {
        margin-left: @gridColumnWidthWithoutGap*@i;
    }
}

.generate-col-nogap(@prefix, @n, @i: 1) when (@i =< @n) {
    .@{prefix}c-@{i} {
        &:extend(mor-grid.nogap .c-n);
    }
}

.generate-col-nogap(@prefix, @n, @i: 1) when (@i =< @n) {
    .@{prefix}c-@{i} {
        width: if((@i = @n), 100%, @gridColumnWidthWithoutGap*@i);
    }
    .generate-col-nogap(@prefix, @n, (@i + 1));
}

.generate-col-avggap(@prefix, @n, @i: 1) when (@i < @n) {
    .@{prefix}offset-@{i} {
        margin-left: @gridColumnWidthGapAverage*@i + @gridGutterWidth*@i !important;

        &:first-child{
            margin-left: @gridColumnWidthGapAverage*@i + @gridGutterWidth*(@i + 1) !important;
        }

        &:last-child{
            margin-right: 0;
        }
    }
}

.generate-col-avggap(@prefix, @n, @i: 1) when (@i =< @n) {
    .@{prefix}c-@{i} {
        width: if((@i = @n), 100%, @gridColumnWidthGapAverage*@i + @gridGutterWidth*(@i - 1));
    }
    .generate-col-avggap(@prefix, @n, (@i + 1));
}

.grid(@prefix: ~'') {
    .c-n{
        display: block;
        float: left;
        margin-right: @gridGutterWidth;
    }

    .generate-col(@prefix, 24);

    &.nogap{
        .c-n {
            display: block;
            float: left;
            margin-right: 0;
        }

        .generate-col-nogap(@prefix, 24);
    }

    &.avggap{
        > [class^='c-']:first-child,
        > [class^='xs-c-']:first-child,
        > [class^='s-c-']:first-child,
        > [class^='m-c-']:first-child,
        > [class^='l-c-']:first-child,
        > [class^='xl-c-']:first-child{
            margin-left: @gridGutterWidth;
        }

        > [class^='c-']:last-child,
        > [class^='xs-c-']:last-child,
        > [class^='s-c-']:last-child,
        > [class^='m-c-']:last-child,
        > [class^='l-c-']:last-child,
        > [class^='xl-c-']:last-child{
            margin-right: @gridGutterWidth;
        }

        .generate-col-avggap(@prefix, 24);
    }
}

mor-grid {
    display: block;

    > [class^='c-']:last-child,
    > [class^='xs-c-']:last-child,
    > [class^='s-c-']:last-child,
    > [class^='m-c-']:last-child,
    > [class^='l-c-']:last-child,
    > [class^='xl-c-']:last-child{
        margin-right: 0;
    }

    &::after{
        content: ' ';
        height: 0;
        display: block;
        clear: both;
    }

    .grid();

    &.fill,
    &.fill > [class^='c-'],
    &.fill > [class^='xs-c-'],
    &.fill > [class^='s-c-'],
    &.fill > [class^='m--c-'],
    &.fill > [class^='l-c-'],
    &.fill > [class^='xl-c-'] {
        height: 100%;
    }

    // default status
    &{}
}

@media only screen{
    @media (max-width: 575.98px) {
        mor-grid{
            .grid(xs-);
        }
    }
    @media (min-width: 576px) and (max-width: 767.98px) {
        mor-grid{
            .grid(s-);
        }
    }
    @media (min-width: 768px) and (max-width: 991.98px) {
        mor-grid{
            .grid(m-);
        }
    }
    @media (min-width: 992px) and (max-width: 1199.98px) {
        mor-grid{
            .grid(l-);
        }
    }
    @media (min-width: 1200px) {
        mor-grid{
            .grid(xl-);
        }
    }
}