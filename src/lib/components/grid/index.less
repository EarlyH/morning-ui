.generate-col(@prefix, @n, @spaceAround: false, @gutter: @gridGutterWidth, @i: 1) when (@i =< @n) {
    @gridColumnWidth : if((@spaceAround = true), %(~'(100% - %s * %s) / %s', @gutter, @n, @n), %(~'(100% - %s * (%s - 1)) / %s', @gutter, @n, @n));

    &{
        margin-bottom: @gutter;
    }

    .@{prefix}col-@{i} {
        width: if((@i = @n), 100%, calc(@gridColumnWidth * @i + @gutter * (@i - 1)));
        margin-right: @gutter;

        & when (@spaceAround = true) {
            margin: 0 @gutter / 2;
        }

        &:last-child when (@spaceAround = true) {
            margin: 0 @gutter / 2;
        }
    }

    .@{prefix}offset-@{i} when (@i < @n) {
        margin-left: calc(@gridColumnWidth * @i + @gutter * @i);

        & when (@spaceAround = true) {
            margin-left: calc(@gridColumnWidth * @i + @gutter * (@i + 0.5));
        }
    }

    .@{prefix}push-@{i} when (@i < @n) {
        left: calc(@gridColumnWidth * @i + @gutter * @i);
    }

    .@{prefix}pull-@{i} when (@i < @n) {
        right: calc(@gridColumnWidth * @i + @gutter * @i);
    }

    .col when (@i = 1){
        margin-right: @gutter;
    }

    .generate-col(@prefix, @n, @spaceAround, @gutter, (@i + 1));
}

.gutterSize(@key, @size) {
    &.space-around .row when (@key = m) {
        .generate-col(@prefix, @gridColumnNumber, true, @size);
    }

    .row when (@key = m) {
        .generate-col(@prefix, @gridColumnNumber, false, @size);
    }

    &.gutter-@{key}{
        &.space-around .row{
            .generate-col(@prefix, @gridColumnNumber, true, @size);
        }

        .row{
            .generate-col(@prefix, @gridColumnNumber, false, @size);
        }
    }
}

/* stylelint-disable length-zero-no-unit */
.grid(@prefix: ~'') {
    .gutterSize(xs, 4px);
    .gutterSize(s, 8px);
    .gutterSize(m, 16px);
    .gutterSize(l, 24px);
    .gutterSize(xl, 36px);
    .gutterSize(none, 0px);
}
/* stylelint-enable length-zero-no-unit */

mor-grid {
    display: flex;
    width: 100%;
    flex-direction: column;

    .row{
        display: flex;
        width: 100%;
        flex-wrap: nowrap;
        position: relative;

        .col{
            flex-shrink: 1;
            flex-grow: 1;
            width: 100%;
        }

        > [class*='col-']{
            display: block;
            box-sizing: border-box;
            flex-shrink: 0;
            flex-grow: 0;
        }

        > [class*='push-'],
        > [class*='pull-']{
            position: relative;
        }

        > [class*='col-']:last-child,
        > .col:last-child{
            margin-right: 0 !important;
        }

        &,
        &.justify-start{
            justify-content: flex-start;
        }

        &.justify-end{
            justify-content: flex-end;
        }

        &.justify-center{
            justify-content: center;
        }

        &.justify-space-between{
            justify-content: space-between;
        }

        &.justify-space-around{
            justify-content: space-around;
        }

        &.vertical-top{
            align-items: flex-start;
        }

        &.vertical-center{
            align-items: center;
        }

        &.vertical-bottom{
            align-items: flex-end;
        }

        &:last-child{
            margin-bottom: 0 !important;
        }
    }

    .grid();

    &.fill,
    &.fill > .row,
    &.fill > .row > .col,
    &.fill > .row > [class*='col-'] {
        height: 100%;
    }
}

@media only screen{
    @media (max-width: 575.98px) {
        mor-grid{
            .grid(xs-);
        }
    }
    @media (min-width: 576px) and (max-width: 767.98px) {
        mor-grid{
            .grid(s-);
        }
    }
    @media (min-width: 768px) and (max-width: 991.98px) {
        mor-grid{
            .grid(m-);
        }
    }
    @media (min-width: 992px) and (max-width: 1199.98px) {
        mor-grid{
            .grid(l-);
        }
    }
    @media (min-width: 1200px) {
        mor-grid{
            .grid(xl-);
        }
    }
}
