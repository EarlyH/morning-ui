@labelSizeBorderRadius: 2, 1.66, 1.33, 1, 1, 1, 1;
@labelSizeMargin: 0.5, 0.4375, 0.25, 0.1875, 0.125, 0.125, 0.125;
@labelSizeSpanFontSize: 1.3, 1.2, 1, 0.8, 0.75, 0.625, 0.5;

mor-label{
    display: inline-block;
    white-space: nowrap;
    vertical-align: middle;
    height: auto;
    // margin: 0 @fontSize*0.125;
    overflow: hidden;
    font-size: 0;
    color: @colorWhite;

    &.image,
    &.icon{
        padding: 0 !important;
    }

    &,
    & > span{
        line-height: 1.8em;
    }

    & > span{
        display: inline-block;
        height: 1.8em;
        vertical-align: top !important;
    }

    &.image img{
        vertical-align: top !important;
        height: 1.8em;
        width: 1.8em;
    }

    &.icon > .iconfont,
    &.icon > .mo-icon{
        display: inline-block;
        vertical-align: top !important;
        line-height: 1.8em;
    }

    .close-icon{
        cursor: pointer;
        padding-left: 0.5em;
        opacity: 0.85;

        &:hover{
            opacity: 1;
        }
    }

    each(@sizeNameMap, {
        @sizeBorderRadius: @borderRadius*extract(@labelSizeBorderRadius, @index);
        @sizeFontSize: @fontSize*extract(@labelSizeSpanFontSize, @index);

        & when (@value = m) {
            border-radius: @sizeBorderRadius;
            margin: 0 @fontSize*extract(@labelSizeMargin, @index);

            & when (@value = xxl), (@value = l) {
                &,
                & > span,
                &.icon > .iconfont,
                &.icon > .mo-icon{
                    line-height: 1.9em;
                }

                &.image img{
                    height: 1.9em;
                }
            }

            & when (@value = s), (@value = xs), (@value = xxs) {
                &,
                & > span,
                &.icon > .iconfont,
                &.icon > .mo-icon{
                    line-height: 1.84em;
                }

                &.image img{
                    height: 1.84em;
                }
            }

            & when (@value = xs) {
                transform: scale(0.85);
            }

            & when (@value = xxs) {
                transform: scale(0.75);
            }

            &,
            & > span{
                font-size: @sizeFontSize;
                padding: 0 @fontSize*extract(@labelSizeSpanFontSize, @index);
            }

            .close-icon{
                font-size: @sizeFontSize;
            }

            &.image > span:last-child{
                padding: 0 @sizeFontSize 0 @sizeFontSize*0.7;
            }

            &.image > span:first-child{
                padding: 0 @sizeFontSize*0.7 0 @sizeFontSize;
            }

            &.image > img:first-child{
                border-radius: @sizeBorderRadius 0 0 @sizeBorderRadius;
            }

            &.image > img:last-child{
                border-radius: 0 @sizeBorderRadius @sizeBorderRadius 0;
            }

            &.icon > .iconfont:first-child,
            &.icon > .mo-icon:first-child{
                font-size: @sizeFontSize;
                padding-left: @sizeFontSize*0.6;
            }

            &.icon > .iconfont:last-child,
            &.icon > .mo-icon:last-child{
                font-size: @sizeFontSize;
                padding-right: @sizeFontSize*0.6;
            }

            &.icon > span:last-child{
                padding: 0 @sizeFontSize 0 @sizeFontSize*0.2;
            }

            &.icon > span:first-child{
                padding: 0 @sizeFontSize*0.2 0 @sizeFontSize;
            }
        }

        &.si-@{value}{
            border-radius: @sizeBorderRadius;
            margin: 0 @fontSize*extract(@labelSizeMargin, @index);

            & when (@value = xxl), (@value = l) {
                &,
                & > span,
                &.icon > .iconfont,
                &.icon > .mo-icon{
                    line-height: 1.9em;
                }

                &.image img{
                    height: 1.9em;
                }
            }

            & when (@value = s), (@value = xs), (@value = xxs) {
                &,
                & > span,
                &.icon > .iconfont,
                &.icon > .mo-icon{
                    line-height: 1.84em;
                }

                &.image img{
                    height: 1.84em;
                }
            }

            & when (@value = xs) {
                transform: scale(0.85);
            }

            & when (@value = xxs) {
                transform: scale(0.75);
            }

            &,
            & > span{
                font-size: @sizeFontSize;
                padding: 0 @fontSize*extract(@labelSizeSpanFontSize, @index);
            }

            .close-icon{
                font-size: @sizeFontSize;
            }

            &.image > span:last-child{
                padding: 0 @sizeFontSize 0 @sizeFontSize*0.7;
            }

            &.image > span:first-child{
                padding: 0 @sizeFontSize*0.7 0 @sizeFontSize;
            }

            &.image > img:first-child{
                border-radius: @sizeBorderRadius 0 0 @sizeBorderRadius;
            }

            &.image > img:last-child{
                border-radius: 0 @sizeBorderRadius @sizeBorderRadius 0;
            }

            &.icon > .iconfont:first-child,
            &.icon > .mo-icon:first-child{
                font-size: @sizeFontSize;
                padding-left: @sizeFontSize*0.6;
            }

            &.icon > .iconfont:last-child,
            &.icon > .mo-icon:last-child{
                font-size: @sizeFontSize;
                padding-right: @sizeFontSize*0.6;
            }

            &.icon > span:last-child{
                padding: 0 @sizeFontSize 0 @sizeFontSize*0.2;
            }

            &.icon > span:first-child{
                padding: 0 @sizeFontSize*0.2 0 @sizeFontSize;
            }
        }
    });

    &.co-t{
        background-color: @colorTheme;
    }

    &.co-lt{
        background-color: @colorLightTheme;
    }

    &.co-dt{
        background-color: @colorDarkTheme;
    }

    &.co-s{
        background-color: @colorSuccess;
    }

    &.co-w{
        background-color: @colorWarning;
    }

    &.co-d{
        background-color: @colorDanger;
    }

    &.co-p{
        background-color: @colorPrimary;
    }

    &.co-m{
        background-color: @colorMinor;
    }

    &.co-i{
        background-color: @colorInfo;
    }

    &.co-bk{
        background-color: @colorBlack;
    }

    each(range(11), {
        @colorName : 'colorNeutral@{value}';

        &.co-n@{value}{
            background-color: @@colorName;
            color: if((@value > 5), @colorWhite, @colorBlack);
        }
    });

    &.co-wh{
        background-color: @colorWhite;
        color: @colorBlack;
    }

    &.st-normal{}

    &.st-apparent{
        animation-name: apparent;
        animation-duration: 1s;
        animation-timing-function: linear;
        animation-iteration-count: infinite;
    }

    // default status
    &{
        // .si-m;
        .co-t;
    }
}
